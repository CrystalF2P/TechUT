package pl.mkrause.crud.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Person;

import pl.mkrause.crud.domain.Fish;

public class CrudJDBC implements Crud {

	
	private Connection conn;
	private Statement stmt;
	
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTableFish = "CREATE TABLE Fish(id bigint GENERATED BY DEFAULT AS IDENTITY, gatunek varchar(30), data_zlowienia date, waga double)";
	
	private PreparedStatement addFishStmt;
	private PreparedStatement deleteAllFishStmt;
	private PreparedStatement getAllFishStmt;
	
	public CrudJDBC() {
		try {
			conn = DriverManager.getConnection(url);
			stmt = conn.createStatement();

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Fish".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			
			if (!tableExists)
				stmt.executeUpdate(createTableFish);
			
			addFishStmt = conn.prepareStatement("INSERT INTO Fish (gatunek, data_zlowienia, waga) VALUES (?, ?, ?)");
			deleteAllFishStmt = conn.prepareStatement("DELETE FROM Fish");
			getAllFishStmt = conn.prepareStatement("SELECT id, gatunek, data_zlowienia, waga FROM Fish");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnection() {
		return conn;
	}
	
	
	
	void clearFish() {
		try {
			deleteAllFishStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	@Override
	public int addFish(Fish fish) {
		int count = 0;
		try {
			addFishStmt.setString(1, fish.getGatunek());
			addFishStmt.setDate(2, fish.getDataZlowienia());
			addFishStmt.setDouble(3, fish.getWaga());

			count = addFishStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	
	@Override
	public List<Fish> getAllFish() {
		List<Fish> pluralfish = new ArrayList<Fish>();

		try {
			ResultSet rs = getAllFishStmt.executeQuery();

			while (rs.next()) {
				Fish f = new Fish();
				f.setId(rs.getInt("id"));
				f.setGatunek(rs.getString("gatunek"));
				f.setDataZlowienia(rs.getDate("dataZlowienia"));
				f.setWaga(rs.getDouble("waga"));
				pluralfish.add(f);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pluralfish;
	}
	
	
	@Override
	public void addAllFish(List<Fish> pluralfish) {

		try {
			conn.setAutoCommit(false);
			for (Fish fish : pluralfish) {
				addFishStmt.setString(1, fish.getGatunek());
				addFishStmt.setDate(2, fish.getDataZlowienia());
				addFishStmt.setDouble(3, fish.getWaga());
				addFishStmt.executeUpdate();
			}
			conn.commit();
			
		} catch (SQLException exception) {
			
			try {
				conn.rollback();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

	}

}
