package pl.mkrause.crud.service;

import pl.mkrause.crud.domain.Fish;

import java.math.BigDecimal;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class FishServiceJDBC implements FishService {
    private Connection conn;
    private String url = "jdbc:hsqldb:hsql://localhost/workdb";
    private String createTable = "CREATE TABLE Fish(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
            "gatunek varchar(20), dataZlowienia Date, waga double, CHECK(waga > 0.0))";
    private PreparedStatement addFishS;
    private PreparedStatement updateFishS;
    private PreparedStatement deleteFishS;
    private PreparedStatement deleteAllFishS;
    private PreparedStatement getAllFishS;
    private PreparedStatement findFishByIdS;
    private PreparedStatement findFishByGatunekS;

    private Statement stmt;
    ResultSet rs;

    public FishServiceJDBC() {
        try {
            conn = DriverManager.getConnection(url);
            stmt = conn.createStatement();

            rs = conn.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Fish".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                stmt.executeUpdate(createTable);

            addFishS = conn.prepareStatement("INSERT INTO Fish (gatunek, dataZlowienia, waga) " +
                    "VALUES (?, ?, ?)");
            deleteAllFishS = conn.prepareStatement("DELETE FROM Fish");
            getAllFishS = conn.prepareStatement("SELECT * FROM Fish");
            deleteFishS = conn.prepareStatement("DELETE FROM Fish WHERE id=?");
            findFishByIdS = conn.prepareStatement("SELECT * FROM Fish WHERE id=?");
            findFishByGatunekS = conn.prepareStatement("SELECT * FROM Fish WHERE gatunek=?");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return conn;
    }

    @Override
    public void clear() {
        try {
            deleteAllFishS.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void addFish(Fish fish) {
        try {
            addFishS.setString(1, fish.getGatunek());
            java.sql.Date data = new java.sql.Date(fish.getDataZlowienia().getTime());
            addFishS.setDate(2, data);
            addFishS.setDouble(3, fish.getWaga());

            addFishS.executeUpdate();
            
        } catch (SQLException e) {
            if(fish.getWaga() <= 0) System.out.println("Waga musi byc wieksza od 0");
            e.printStackTrace();
        }
    }

    @Override
    public void deleteFish(long id) {

        try {
            deleteFishS.setBigDecimal(1, new BigDecimal(id));
            
            deleteFishS.executeUpdate();
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<Fish> getFish(PreparedStatement statement) {
        List<Fish> fishList = new ArrayList<Fish>();

        try {
            ResultSet rs = statement.executeQuery();

            while (rs.next()) {
                Fish fish = new Fish();
                fish.setId(rs.getInt("id"));
                fish.setGatunek(rs.getString("gatunek"));
                java.util.Date date = new java.util.Date(rs.getDate("dataZlowienia").getTime());
                fish.setDataZlowienia(date);
                fish.setWaga(rs.getDouble("waga"));
                fishList.add(fish);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return fishList;
    }

    @Override
    public Fish updateFish(Fish fish) {
        try{
            updateFishS.setString(1,fish.getGatunek());
            java.sql.Date date = new java.sql.Date(fish.getDataZlowienia().getTime());
            updateFishS.setDate(2,date);
            updateFishS.setDouble(3,fish.getWaga());
            updateFishS.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;

    }
    
    @Override
    public List<Fish> getAllFish() {
        return getFish(getAllFishS);
    }

    @Override
    public List<Fish> findFishById(long id) {
        try {
            findFishByIdS.setBigDecimal(1, new BigDecimal(id));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return getFish(findFishByIdS);
    }

    @Override
    public List<Fish> findFishByGatunek(String gatunek) {
        try {
            findFishByGatunekS.setString(1, gatunek);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return getFish(findFishByGatunekS);
    }

    @Override
    public void addAllFish(List<Fish> list) {
        try {
            conn.setAutoCommit(false);
            for (Fish fish : list) {
                addFishS.setString(1, fish.getGatunek());
                java.sql.Date date = new java.sql.Date(fish.getDataZlowienia().getTime());
                addFishS.setDate(2, date);
                addFishS.setDouble(3, fish.getWaga());
                addFishS.executeUpdate();
            }
            conn.commit();

        } catch (SQLException exception) {

            try {
                conn.rollback();
                exception.printStackTrace();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

}
